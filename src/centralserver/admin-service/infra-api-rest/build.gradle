plugins {
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
}

configurations {
    liquibaseLibs {
        apply plugin: 'base'
    }
}

dependencies {
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapStructVersion}")

    //TODO Should depend on core-api, not whole core.
    implementation project(':centralserver:admin-service:core')

    implementation project(':common-util')
    implementation project(':common-verifier')
    implementation project(':signer-protocol')
    implementation project(':common-ui')
    implementation project(':common-rest-api')

    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.data:spring-data-commons')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    implementation("io.swagger.parser.v3:swagger-parser-v3:${swaggerParserVersion}")
    implementation('io.swagger.core.v3:swagger-annotations:2.1.13')
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"

    testImplementation project(':common-test')
    testImplementation(testFixtures(project(":common-rest-api")))
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation("org.hsqldb:hsqldb:$hsqldbVersion")
    testImplementation('org.liquibase:liquibase-core')
}

sourceSets {
    main {
        java.srcDirs = [
            'src/main/java',
            "${buildDir}/generated-sources/openapi/src/main/java",
            "${buildDir}/generated/sources/annotationProcessor/java/main"
        ]
    }
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/openapi-definition.yaml"
    outputDir = "$buildDir/generated-sources/openapi"
    apiPackage = "org.niis.xroad.centralserver.openapi"
    modelPackage = "org.niis.xroad.centralserver.openapi.model"
    modelNameSuffix = "Dto"
    importMappings = [
        User           : "org.niis.xroad.restapi.openapi.model.User",
        ErrorInfo      : "org.niis.xroad.restapi.openapi.model.ErrorInfo",
        CodeWithDetails: "org.niis.xroad.restapi.openapi.model.CodeWithDetails"
    ]
    globalProperties = [
        modelDocs              : "false",
        apis                   : "", // must use empty strings instead of "true":
        // https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
        models                 : "",
        generateSupportingFiles: "false",
        skipDefaultInterface   : "true",
        supportingFiles        : 'ApiUtil.java'
    ]
    configOptions = [
        interfaceOnly       : "true",
        useTags             : "true",
        documentationProvider  : "none",
        skipDefaultInterface   : "true",
        openApiNullable: "false"
    ]
}

// Fix up to date check
tasks.openApiGenerate {
    inputs.files(openApiGenerate.inputSpec)
    outputs.dir(openApiGenerate.outputDir)
}

compileJava.dependsOn tasks.openApiGenerate
