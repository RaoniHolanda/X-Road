pipeline {
    agent any
    environment {
        DOCKER_GID = """${sh(returnStdout: true, script: 'getent group docker | cut -d: -f3')}""".trim()
    }
    stages {
        stage('Output build parameters') {
            steps {
                sh 'env'
            }
        }
        stage('Clean and clone repository') {
            steps {
                checkout([
                        $class                           : 'GitSCM',
                        branches                         : [[name: 'new-cs-intTests-poc']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions                       : [[$class: 'CleanBeforeCheckout']],
                        gitTool                          : 'Default',
                        submoduleCfg                     : [],
                        userRemoteConfigs                : [
                                [
                                        url    : 'https://github.com/nordic-institute/X-Road.git',
                                        refspec: '+refs/heads/*:refs/remotes/origin/* +refs/pull/*/head:refs/remotes/origin/pull/*'
                                ]
                        ]
                ])
            }
        }
        stage('Compile Code') {
            environment {
                GRADLE_OPTS = '-Dorg.gradle.daemon=false -Dsonar.host.url=https://sonarqube.niis.org'
                JAVA_HOME = '/usr/lib/jvm/java-11-openjdk-amd64'
            }
            agent {
                dockerfile {
                    dir 'src/packages/docker-jenkins-compile'
                    additionalBuildArgs '--build-arg JENKINSUID=`id -u jenkins` --build-arg JENKINSGID=`id -g jenkins` --build-arg DOCKERGID=`stat -c %g /var/run/docker.sock`'
                    args '-v /var/run/docker.sock:/var/run/docker.sock --group-add ${DOCKER_GID}'
                    reuseNode true
                }
            }

            steps {
                sh 'whoami'
                sh 'ls -ltra /var/run/'
                sh 'curl --unix-socket /var/run/docker.sock http://localhost/version'
            }
        }


    }
}
